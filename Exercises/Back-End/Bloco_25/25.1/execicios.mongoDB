// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .

db.clientes.aggregate(
  [
    { $match: { sexo: 'MASCULINO' } }
  ]
)

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .

db.clientes.aggregate(
  [
    {
      $match: {
        sexo: 'FEMININO',
        dataNascimento: {
          $gte: ISODate("1995-01-01T00:00:00.0Z"),
          $lte: ISODate("2005-01-01T00:00:00.0Z")
          }
        }
      }
  ]
)

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .

db.clientes.aggregate(
  [
    {
      $match: {
        sexo: 'FEMININO',
        dataNascimento: {
          $gte: ISODate("1995-01-01T00:00:00.0Z"),
          $lte: ISODate("2005-01-01T00:00:00.0Z")
          }
        }
    },
    {$limit: 5}
  ]
)

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.

db.clientes.aggregate(
  [
    {
      $match: {
        "endereco.uf": 'SC'
      }
    },
    {
      $group: {
      _id: 'endereco.uf',
      total: {
        $sum: 1
      }
      }
    }
  ]
)

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .

db.clientes.aggregate(
  [
    {
      $group: {
        _id: '$sexo',
        total: { $sum: 1 }
      }
    }
  ]
)

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .

db.clientes.aggregate(
  [
    {
      $group: {
        _id: {
          'sexo': '$sexo',
          'UF': '$endereco.uf' 
        },
        total: { $sum: 1 }
      }, 
    }
  ]
)

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):

db.clientes.aggregate(
  [
    {
      $group: {
        _id: {
          'sexo': '$sexo',
          'estado': '$endereco.uf' 
        },
        total: { $sum: 1 }
      }, 
    },
    {
      $project: {
        _id: false,
        'estado': '$_id.estado',
        'sexo':  '$_id.sexo',
        'total': '$total'
      }
    }
  ]
)

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.

db.vendas.aggregate(
  [
    {
      $group: {
        _id: '$clienteId',
        totalPago: {$sum: '$valorTotal'}
      }
    },
    {
      $sort: {'totalPago': 1}
    },
    {
      $limit: 5
    }
  ]
);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019

db.vendas.aggregate(
  {
    $match: {
      dataVenda: {
        $lt: ISODate('2019-12-31'),
        $gte: ISODate('2019-01-01')
      }
    }
  },
  {
    $group: {
      _id: '$clienteId',
      totalCompras: { $sum: '$valorTotal' }
    }
  },
  {
    $sort: {'totalCompras': 1 }
  },
  {
    $limit: 10
  }
)

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.

db.vendas.aggregate(
  [
    {
      $group: {
        _id: '$clienteId',
        total: { $sum: 1 }
      }
    },
    {
      $match: {
        total: {$gt: 5 }
      }
    },
    {$count: 'total'}
  ]
)

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .

db.vendas.aggregate(
  [
    {
      $match: {
        dataVenda: {
          $gte: ISODate('2020-01-01'),
          $lte: ISODate('2020-03-01')
        }
      }
    },
    {
      $group: {
        _id: '$clienteId',
        totalDeCompras: { $sum: 1 }
      }
    },
    {
      $match: {
        totalDeCompras: {$lt: 3 }
      }
    },
    {
      $count: 'total'
    }
  ]
)

// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 . Retorne os documentos no seguinte formato:

db.vendas.aggregate(
  [
    {
      $match: {
        dataVenda: {
          $gte: ISODate('2020-01-01')
        }
      }
    },
    {
      $lookup: {
        from: "clientes",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "cliente_data"
      }
    },
    {
      $project: {
        'cliente_data._id': false,
        'cliente_data.clienteId': false
      }
    },
    {
      $group: {
        _id: '$cliente_data.endereco.uf',
        totalVendas: { $sum: 1 }
      }
    },
    {
      $unwind: '$_id',
    },
    {
      $project: {
        _id: false,
        'uf': '$_id',
        totalVendas: true
      }
    },
    {
      $sort: {'totalVendas': -1}
    },
    {
      $limit: 3
    }
  ]
)


// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf . Retorne os documentos no seguinte formato:

db.vendas.aggregate(
  [
    {
      $match: {
        dataVenda: {
          $lte: ISODate('2019-12-31'),
          $gte: ISODate('2019-01-01'),
        }
      }
    },
    {
      $lookup: {
         from: "clientes",
         localField: "clienteId",
         foreignField: "clienteId",
         as: "cliente_dados"
      }
    },
    {
      $group: {
        _id: '$cliente_dados.endereco.uf',
        mediaVendas: { $avg: '$valorTotal' },
        totalVendas: { $sum: 1 },
      }
    },
    {
      $unwind: '$_id'
    },
    {
      $sort: { '_id': 1 }
    },
    {
      $project: {
        _id: false,
        'uf': '$_id',
        'mediaVendas': '$mediaVendas',
        'totalVendas': '$totalVendas',
      }
    }
  ]
)
