// Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes . Algumas dicas:

db.clientes.aggregate(
  [ 
    {
      $project: {
        idade: {
            $floor: {
              $divide: [
              {$subtract: [new Date(),'$dataNascimento']},
              3.154e+10
            ]
          } 
        }
      }
    }
  ]
)

// Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.

db.clientes.aggregate(
  [
    {
      $project: {
        idade: {
          $floor: {
            $divide: [
              {$subtract: [new Date(), '$dataNascimento']},
              3.154e+10
            ]
          }
        }
      }
    },
    {
      $match: {
        idade: {
          $lte: 25,
          $gt: 18
        }
      }
    },
    {
      $count: 'id'
    }
  ]
)

// Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .

db.vendas.aggregate(

)

db.clientes.aggregate(
  [
    {
      $project: {
        clienteId: true,
        idade: {
          $floor: {
            $divide: [
              {$subtract: [new Date(), '$dataNascimento']},
              3.154e+10
            ]
          }
        }
      }
    },
    {
      $lookup: {
        from: "vendas",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "compras"
      }
    }
  ]
)

// Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020 .


db.vendas.aggregate()

db.clientes.aggregate(
  [
    {
      $project: {
        clienteId: true,
        idade: {
          $floor: {
            $divide: [
              {$subtract: [new Date(), '$dataNascimento']},
              3.154e+10
            ]
          }
        }
      }
    },
    {
      $lookup: {
        from: "vendas",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "compras"
      }
    },
    {
      $match: {
        'compras.dataVenda': {
          $gte: ISODate('2019-06-01'),
          $lte: ISODate('2020-03-31')
        }
      }
    }
  ]
)

// Exercício 5 : Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.

db.clientes.aggregate(
  [
    {
      $addFields: {
        idade: {
          $floor: {
            $divide: [
              {$subtract: [new Date(), '$dataNascimento']},
              3.154e+10
            ]
          }
        }
      }
    },
    {
      $lookup: {
        from: "vendas",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "compras"
      }
    },
    {
      $match: {
        'compras.dataVenda': {
          $gte: ISODate('2019-06-01'),
          $lte: ISODate('2020-03-31')
        }
      }
    }
  ]
).itcount()

// Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais compras.

db.clientes.aggregate(
  [
    {
      $addFields: {
        idade: {
          $floor: {
            $divide: [
              {$subtract: [new Date(), '$dataNascimento']},
              3.154e+10
            ]
          }
        }
      }
    },
    {
      $lookup: {
        from: "vendas",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "compras"
      }
    },
    {
      $match: {
        'compras.dataVenda': {
          $gte: ISODate('2019-06-01'),
          $lte: ISODate('2020-03-31')
        }
      }
    },
    { $unwind: '$compras' },
    {
      $group: {
        _id: '$endereco.uf',
        count: {$sum: 1}
      }
    },
    {
      $sort: {'count': -1 }
    },
    {
      $limit: 5
    }
  ]
);


// Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:

db.vendas.aggregate(
  [
    {
      $unwind: '$itens'
    },
    {
      $match: {
        'itens.nome': 'QUEIJO PRATO'
      }
    },
        {
      $group: {
        _id: '$clienteId',
        count: {$sum: '$itens.quantidade'}
      }
    },
    {
      $lookup: {
        from: "clientes",
        localField: "_id",
        foreignField: "clienteId",
        as: "dados_clientes"
      }
    },
    {
      $unwind: '$dados_clientes'
    },
    {
      $project: {
        'nomeCliente': '$dados_clientes.nome',
        'uf': '$dados_clientes.endereco.uf',
        'totalConsumido': '$count',
        _id: false
      },
    },
    { $sort: {'totalConsumido': -1} },
    { $limit: 1 }
  ]
)

// Exercício 8 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO . Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista .


db.vendas.aggregate(
  [
    {
      $match: {
        dataVenda: {
          $gte: ISODate('2020-03-01'),
          $lte: ISODate('2020-03-31'),
        },
        status: 'EM SEPARACAO'
      },
    },
    {
      $addFields: {
        dataEntregaPrevista: {
          $add: ['$dataVenda', 86400000 * 3 ]
        }
      }
    },
    {
      $lookup: {
        from: "clientes",
        localField: "clienteId",
        foreignField: "clienteId",
        as: "dados_clientes"
      }
    },
    {$unwind: '$dados_clientes' },
    {
      $project: {
        clienteId:true,
        dataVenda:true,
        dataEntregaPrevista:true,
        _id: false
      }
    }
  ]
)
